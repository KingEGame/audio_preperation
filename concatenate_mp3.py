#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ MP3 —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ ffmpeg
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ–∞–π–ª—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
"""

import os
import sys
import subprocess
import argparse
import logging
from pathlib import Path
from tqdm import tqdm

def setup_logging(log_level=logging.INFO):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    :param log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('concatenate_mp3.log', encoding='utf-8')
        ]
    )
    return logging.getLogger(__name__)

def get_mp3_duration(file_path):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å MP3 —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é ffprobe.
    :param file_path: –ü—É—Ç—å –∫ MP3 —Ñ–∞–π–ª—É.
    :return: –°—Ç—Ä–æ–∫–∞ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS.
    """
    try:
        result = subprocess.run([
            "ffprobe", "-v", "quiet", "-show_entries", "format=duration",
            "-of", "default=noprint_wrappers=1:nokey=1", file_path
        ], capture_output=True, text=True, check=True)
        
        duration_seconds = float(result.stdout.strip())
        hours = int(duration_seconds // 3600)
        minutes = int((duration_seconds % 3600) // 60)
        seconds = int(duration_seconds % 60)
        
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    except subprocess.CalledProcessError:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞: {file_path}")
        return "00:00:00"

def concatenate_mp3_files(input_dir, output_file, file_pattern="*.mp3", sort_by_name=True, logger=None):
    """
    –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ—Ç MP3 —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª.
    
    :param input_dir: –ü–∞–ø–∫–∞ —Å MP3 —Ñ–∞–π–ª–∞–º–∏
    :param output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    :param file_pattern: –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é *.mp3)
    :param sort_by_name: –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
    :param logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if logger is None:
        logger = logging.getLogger(__name__)
    
    input_path = Path(input_dir)
    output_path = Path(output_file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    if not input_path.exists():
        logger.error(f"–í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_path}")
        return False
    
    if not input_path.is_dir():
        logger.error(f"–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {input_path}")
        return False
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ MP3 —Ñ–∞–π–ª—ã
    mp3_files = list(input_path.glob(file_pattern))
    
    if not mp3_files:
        logger.error(f"MP3 —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {input_path}")
        return False
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if sort_by_name:
        mp3_files.sort(key=lambda x: x.name)
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(mp3_files)} MP3 —Ñ–∞–π–ª–æ–≤")
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(mp3_files)} MP3 —Ñ–∞–π–ª–æ–≤:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    total_duration_seconds = 0
    for i, file_path in enumerate(mp3_files, 1):
        duration_str = get_mp3_duration(str(file_path))
        print(f"  {i:2d}. {file_path.name} ({duration_str})")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        time_parts = duration_str.split(":")
        hours = int(time_parts[0])
        minutes = int(time_parts[1])
        seconds = int(time_parts[2])
        total_duration_seconds += hours * 3600 + minutes * 60 + seconds
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM:SS
    total_hours = int(total_duration_seconds // 3600)
    total_minutes = int((total_duration_seconds % 3600) // 60)
    total_seconds = int(total_duration_seconds % 60)
    total_duration_str = f"{total_hours:02d}:{total_minutes:02d}:{total_seconds:02d}"
    
    print(f"\n–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration_str}")
    logger.info(f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration_str}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è ffmpeg
    temp_list_file = output_path.parent / "temp_file_list.txt"
    
    try:
        with open(temp_list_file, 'w', encoding='utf-8') as f:
            for file_path in mp3_files:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                f.write(f"file '{file_path.absolute()}'\n")
        
        logger.info("–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é —á–µ—Ä–µ–∑ ffmpeg
        print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤...")
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é –≤ —Ñ–∞–π–ª: {output_path}")
        
        command = [
            "ffmpeg", "-f", "concat", "-safe", "0",
            "-i", str(temp_list_file),
            "-c", "copy", str(output_path),
            "-y"  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        with tqdm(total=1, desc="–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è", unit="–æ–ø–µ—Ä–∞—Ü–∏—è") as pbar:
            result = subprocess.run(command, capture_output=True, text=True)
            pbar.update(1)
        
        if result.returncode == 0 and output_path.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            file_size = output_path.stat().st_size / (1024 * 1024)  # –≤ –ú–ë
            final_duration = get_mp3_duration(str(output_path))
            
            print(f"\n‚úÖ –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {file_size:.2f} –ú–ë")
            print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {final_duration}")
            
            logger.info(f"–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {output_path}")
            logger.info(f"–†–∞–∑–º–µ—Ä: {file_size:.2f} –ú–ë, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {final_duration}")
            
            return True
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏!")
            print(f"stderr: {result.stderr}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_list_file.exists():
            temp_list_file.unlink()
            logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

def main():
    parser = argparse.ArgumentParser(description="–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è MP3 —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ ffmpeg")
    parser.add_argument('--input', '-i', required=True, help='–ü–∞–ø–∫–∞ —Å MP3 —Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('--output', '-o', required=True, help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É MP3 —Ñ–∞–π–ª—É')
    parser.add_argument('--pattern', '-p', default='*.mp3', help='–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é *.mp3)')
    parser.add_argument('--no-sort', action='store_true', help='–ù–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--interactive', action='store_true', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º')
    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logger = setup_logging(log_level)
    
    logger.info("=== –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ MP3 —Ñ–∞–π–ª–æ–≤ ===")

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if args.interactive:
        print("\n" + "="*60)
        print("–ö–û–ù–ö–ê–¢–ï–ù–ê–¶–ò–Ø MP3 –§–ê–ô–õ–û–í")
        print("="*60)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        if not args.input:
            print("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å MP3 —Ñ–∞–π–ª–∞–º–∏:")
            print("–ü—Ä–∏–º–µ—Ä—ã:")
            print("  - audio_files")
            print("  - C:\\path\\to\\audio_files")
            args.input = input("–í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ").strip().strip('"')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        if not args.output:
            print("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É MP3 —Ñ–∞–π–ª—É:")
            print("–ü—Ä–∏–º–µ—Ä—ã:")
            print("  - combined.mp3")
            print("  - C:\\path\\to\\combined.mp3")
            args.output = input("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ").strip().strip('"')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"  - –ü–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–æ–≤: {args.pattern}")
        print(f"  - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏: {'–ù–µ—Ç' if args.no_sort else '–î–∞'}")
        
        change_settings = input("\n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ").strip().lower()
        if change_settings in ['y', 'yes', '–¥–∞']:
            # –ü–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–æ–≤
            new_pattern = input(f"–ü–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {args.pattern}): ").strip()
            if new_pattern:
                args.pattern = new_pattern
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            sort_choice = input("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
            args.no_sort = sort_choice in ['n', 'no', '–Ω–µ—Ç']
        
        print(f"\n–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
        print(f"  –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {args.input}")
        print(f"  –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output}")
        print(f"  –ü–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–æ–≤: {args.pattern}")
        print(f"  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏: {'–ù–µ—Ç' if args.no_sort else '–î–∞'}")
        
        confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
        if confirm in ['n', 'no', '–Ω–µ—Ç']:
            print("–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

    logger.info(f"–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {vars(args)}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é
    success = concatenate_mp3_files(
        input_dir=args.input,
        output_file=args.output,
        file_pattern=args.pattern,
        sort_by_name=not args.no_sort,
        logger=logger
    )
    
    if success:
        logger.info("=== –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ===")
        print(f"\n{'='*60}")
        print("–ö–û–ù–ö–ê–¢–ï–ù–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"{'='*60}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {args.output}")
        print(f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: concatenate_mp3.log")
    else:
        logger.error("=== –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π ===")
        print(f"\n{'='*60}")
        print("–ö–û–ù–ö–ê–¢–ï–ù–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–û–ô!")
        print(f"{'='*60}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ —Ñ–∞–π–ª: concatenate_mp3.log")

if __name__ == "__main__":
    main() 