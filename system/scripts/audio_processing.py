#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: —Ä–∞–∑–±–∏–≤–∫–∞, —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏—à–∏–Ω—ã, –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è RTX 5080, 32GB RAM, R5 5600X
"""

import os
import sys
import argparse
import logging
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –∞—É–¥–∏–æ
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
try:
    from audio import (
        setup_logging, get_mp3_duration, setup_gpu_optimization, get_optimal_workers,
        parallel_audio_processing_optimized, process_audio_file_optimized,
        GPUMemoryManager, ModelManager, GPU_MEMORY_LIMIT
    )
except ImportError as e:
    print(f"Import error: {e}")
    print("Make sure all dependencies are installed and audio modules are available")
    sys.exit(1)

def print_header():
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "üéµ" + "="*58 + "üéµ")
    print("    –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ê–£–î–ò–û –§–ê–ô–õ–û–í")
    print("    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è RTX 5080 + R5 5600X + 32GB RAM")
    print("üéµ" + "="*58 + "üéµ")

def validate_path_input(prompt, is_input=True):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    while True:
        print(f"\n{prompt}")
        if is_input:
            print("üìÅ –ü—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π:")
            print("   ‚Ä¢ audio.mp3")
            print("   ‚Ä¢ /path/to/audio.wav") 
            print("   ‚Ä¢ ./audio_folder")
            print("   ‚Ä¢ C:\\Users\\User\\Music\\audio.mp3")
        else:
            print("üìÇ –ü—Ä–∏–º–µ—Ä—ã –≤—ã—Ö–æ–¥–Ω—ã—Ö –ø—É—Ç–µ–π:")
            print("   ‚Ä¢ results")
            print("   ‚Ä¢ /path/to/results")
            print("   ‚Ä¢ C:\\Users\\User\\Desktop\\processed_audio")
        
        path = input("‚û§ –ü—É—Ç—å: ").strip().strip('"').strip("'")
        
        if not path:
            print("‚ùå –ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            continue
            
        path_obj = Path(path)
        
        if is_input:
            if path_obj.exists():
                if path_obj.is_file():
                    if path_obj.suffix.lower() in ['.mp3', '.wav']:
                        print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {path_obj.name}")
                        return str(path_obj)
                    else:
                        print("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .mp3 –∏–ª–∏ .wav!")
                        continue
                elif path_obj.is_dir():
                    audio_files = list(path_obj.glob('*.mp3')) + list(path_obj.glob('*.wav'))
                    if audio_files:
                        print(f"‚úÖ –ü–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤")
                        for i, f in enumerate(audio_files[:5], 1):
                            print(f"   {i}. {f.name}")
                        if len(audio_files) > 5:
                            print(f"   ... –∏ –µ—â–µ {len(audio_files) - 5} —Ñ–∞–π–ª–æ–≤")
                        return str(path_obj)
                    else:
                        print("‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ (.mp3 –∏–ª–∏ .wav)!")
                        continue
            else:
                print("‚ùå –§–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                continue
        else:
            # –î–ª—è –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
            try:
                path_obj.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {path_obj}")
                return str(path_obj)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {e}")
                continue

def get_processing_steps():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    steps_info = {
        'split': {
            'name': '–†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏', 
            'desc': '–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã',
            'time': '–±—ã—Å—Ç—Ä–æ',
            'recommended': True
        },
        'denoise': {
            'name': '–®—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ', 
            'desc': '–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞ —Å –ø–æ–º–æ—â—å—é Demucs AI',
            'time': '–º–µ–¥–ª–µ–Ω–Ω–æ',
            'recommended': True
        },
        'vad': {
            'name': '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏—à–∏–Ω—ã', 
            'desc': '–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—É–∑ –∏ —Ç–∏—à–∏–Ω—ã —Å –ø–æ–º–æ—â—å—é Silero VAD',
            'time': '–±—ã—Å—Ç—Ä–æ',
            'recommended': True
        },
        'diar': {
            'name': '–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤', 
            'desc': '–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—á–∏ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º —Å –ø–æ–º–æ—â—å—é PyAnnote',
            'time': '–º–µ–¥–ª–µ–Ω–Ω–æ',
            'recommended': True
        }
    }
    
    print("\nüîß –ù–ê–°–¢–†–û–ô–ö–ê –≠–¢–ê–ü–û–í –û–ë–†–ê–ë–û–¢–ö–ò:")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n")
    
    selected_steps = []
    
    for step, info in steps_info.items():
        rec_mark = "‚≠ê" if info['recommended'] else "  "
        time_mark = "üêå" if info['time'] == '–º–µ–¥–ª–µ–Ω–Ω–æ' else "‚ö°"
        
        print(f"{rec_mark} {step.upper()}: {info['name']} {time_mark}")
        print(f"   üìù {info['desc']}")
        
        while True:
            choice = input(f"   ‚û§ –í–∫–ª—é—á–∏—Ç—å —ç—Ç–∞–ø {step}? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
            if choice in ['', 'y', 'yes', '–¥–∞']:
                selected_steps.append(step)
                print(f"   ‚úÖ –≠—Ç–∞–ø {step} –≤–∫–ª—é—á–µ–Ω\n")
                break
            elif choice in ['n', 'no', '–Ω–µ—Ç']:
                print(f"   ‚è≠Ô∏è  –≠—Ç–∞–ø {step} –ø—Ä–æ–ø—É—â–µ–Ω\n")
                break
            else:
                print("   ‚ùå –í–≤–µ–¥–∏—Ç–µ y –∏–ª–∏ n")
    
    return selected_steps

def estimate_processing_time(files_count, total_duration_minutes, steps, parallel_workers):
    """–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    time_per_minute = {
        'split': 0.05,     # 3 —Å–µ–∫ –Ω–∞ –º–∏–Ω—É—Ç—É –∞—É–¥–∏–æ
        'denoise': 0.8,    # 48 —Å–µ–∫ –Ω–∞ –º–∏–Ω—É—Ç—É –∞—É–¥–∏–æ  
        'vad': 0.1,        # 6 —Å–µ–∫ –Ω–∞ –º–∏–Ω—É—Ç—É –∞—É–¥–∏–æ
        'diar': 0.3        # 18 —Å–µ–∫ –Ω–∞ –º–∏–Ω—É—Ç—É –∞—É–¥–∏–æ
    }
    
    total_time = 0
    for step in steps:
        total_time += time_per_minute.get(step, 0) * total_duration_minutes
    
    # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—é
    if files_count > 1:
        total_time = total_time / min(parallel_workers, files_count)
    
    return total_time

def show_interactive_menu():
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    print_header()
    
    # === –®–ê–ì 1: –í–•–û–î–ù–´–ï –§–ê–ô–õ–´ ===
    print("\nüì• –®–ê–ì 1: –í–´–ë–û–† –í–•–û–î–ù–´–• –§–ê–ô–õ–û–í")
    input_path = validate_path_input("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏:", is_input=True)
    
    # === –®–ê–ì 2: –í–´–•–û–î–ù–ê–Ø –ü–ê–ü–ö–ê ===
    print("\nüì§ –®–ê–ì 2: –í–´–ë–û–† –ü–ê–ü–ö–ò –î–õ–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    output_path = validate_path_input("–£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", is_input=False)
    
    # === –®–ê–ì 3: –≠–¢–ê–ü–´ –û–ë–†–ê–ë–û–¢–ö–ò ===
    print("\n‚öôÔ∏è –®–ê–ì 3: –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    steps = get_processing_steps()
    
    if not steps:
        print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
        return None
    
    # === –®–ê–ì 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
    print("üîß –®–ê–ì 4: –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´")
    
    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞
    print("\nüìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏:")
    print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 600 —Å–µ–∫ (10 –º–∏–Ω—É—Ç)")
    print("   ‚Ä¢ –î–ª—è —Å–ª–∞–±—ã—Ö –ü–ö: 300 —Å–µ–∫ (5 –º–∏–Ω—É—Ç)")
    print("   ‚Ä¢ –î–ª—è –º–æ—â–Ω—ã—Ö –ü–ö: 900 —Å–µ–∫ (15 –º–∏–Ω—É—Ç)")
    
    while True:
        duration_input = input("‚û§ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600): ").strip()
        if not duration_input:
            chunk_duration = 600
            break
        try:
            chunk_duration = int(duration_input)
            if 60 <= chunk_duration <= 1800:  # –æ—Ç 1 –¥–æ 30 –º–∏–Ω—É—Ç
                break
            else:
                print("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 60 –¥–æ 1800 —Å–µ–∫—É–Ω–¥!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–ø–∏–∫–µ—Ä–∞
    print("\nüë§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞:")
    print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 1.5 —Å–µ–∫")
    print("   ‚Ä¢ –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑: 1.0 —Å–µ–∫")
    print("   ‚Ä¢ –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑: 2.0 —Å–µ–∫")
    
    while True:
        segment_input = input("‚û§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.5): ").strip()
        if not segment_input:
            min_speaker_segment = 1.5
            break
        try:
            min_speaker_segment = float(segment_input)
            if 0.5 <= min_speaker_segment <= 10.0:
                break
            else:
                print("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0.5 –¥–æ 10.0 —Å–µ–∫—É–Ω–¥!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    # –ú–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω split)
    if 'split' in steps:
        print("\n‚úÇÔ∏è –ú–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∫–∏ –∞—É–¥–∏–æ:")
        print("   1. simple - –ø—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–±—ã—Å—Ç—Ä–æ)")
        print("   2. word_boundary - —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —Å–ª–æ–≤ (–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ)")
        
        while True:
            method_choice = input("‚û§ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ (1/2, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ").strip()
            if method_choice == '1':
                split_method = 'simple'
                break
            elif method_choice == '2' or not method_choice:
                split_method = 'word_boundary'
                break
            else:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2!")
    else:
        split_method = 'simple'
    
    # –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\nüöÄ –®–ê–ì 5: –°–ò–°–¢–ï–ú–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø")
    gpu_available = setup_gpu_optimization()
    optimal_workers = get_optimal_workers()
    
    print(f"üñ•Ô∏è  GPU: {'‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' if gpu_available else '‚ùå –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}")
    print(f"‚ö° –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {optimal_workers}")
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("\nüîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    print("   ‚Ä¢ –î–∞ - –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
    print("   ‚Ä¢ –ù–µ—Ç - –º–µ–Ω—å—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É")
    
    while True:
        parallel_choice = input("‚û§ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
        if parallel_choice in ['', 'y', 'yes', '–¥–∞']:
            parallel = True
            break
        elif parallel_choice in ['n', 'no', '–Ω–µ—Ç']:
            parallel = False
            optimal_workers = 1
            break
        else:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ y –∏–ª–∏ n!")
    
    # === –®–ê–ì 6: –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ===
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print("="*60)
    print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å: {input_path}")
    print(f"üìÇ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_path}")
    print(f"üîß –≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: {' ‚Üí '.join(steps)}")
    print(f"üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞: {chunk_duration} —Å–µ–∫")
    print(f"üë§ –ú–∏–Ω. —Å–µ–≥–º–µ–Ω—Ç —Å–ø–∏–∫–µ—Ä–∞: {min_speaker_segment} —Å–µ–∫")
    if 'split' in steps:
        print(f"‚úÇÔ∏è  –ú–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∫–∏: {split_method}")
    print(f"üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {'–î–∞' if parallel else '–ù–µ—Ç'}")
    print(f"‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: {optimal_workers}")
    print(f"üñ•Ô∏è  GPU: {'–í–∫–ª—é—á–µ–Ω' if gpu_available else '–û—Ç–∫–ª—é—á–µ–Ω'}")
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        input_path_obj = Path(input_path)
        if input_path_obj.is_file():
            files_count = 1
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - 1 —á–∞—Å –∞—É–¥–∏–æ
            estimated_duration = 60
        else:
            audio_files = list(input_path_obj.glob('*.mp3')) + list(input_path_obj.glob('*.wav'))
            files_count = len(audio_files)
            # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - 1 —á–∞—Å –Ω–∞ —Ñ–∞–π–ª
            estimated_duration = files_count * 60
        
        estimated_time = estimate_processing_time(files_count, estimated_duration, steps, optimal_workers)
        
        if estimated_time < 60:
            time_str = f"{estimated_time:.1f} –º–∏–Ω—É—Ç"
        else:
            time_str = f"{estimated_time/60:.1f} —á–∞—Å–æ–≤"
        
        print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}")
    except:
        pass
    
    print("="*60)
    
    while True:
        confirm = input("\n‚úÖ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏? (y/n/edit): ").strip().lower()
        if confirm in ['y', 'yes', '–¥–∞', '']:
            break
        elif confirm in ['n', 'no', '–Ω–µ—Ç']:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return None
        elif confirm in ['edit', 'e', '–∏–∑–º–µ–Ω–∏—Ç—å']:
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            return show_interactive_menu()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        else:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ y (–¥–∞), n (–Ω–µ—Ç) –∏–ª–∏ edit (–∏–∑–º–µ–Ω–∏—Ç—å)!")
    
    return {
        'input': input_path,
        'output': output_path,
        'chunk_duration': chunk_duration,
        'min_speaker_segment': min_speaker_segment,
        'split_method': split_method,
        'steps': steps,
        'parallel': parallel,
        'use_gpu': gpu_available,
        'workers': optimal_workers
    }

def main():
    parser = argparse.ArgumentParser(description="–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: —Ä–∞–∑–±–∏–≤–∫–∞, —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∏—à–∏–Ω—ã, –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Å–ø–∏–∫–µ—Ä–æ–≤.")
    parser.add_argument('--input', '-i', help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É (mp3/wav) –∏–ª–∏ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('--output', '-o', help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--chunk_duration', type=int, default=600, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–∞ (—Å–µ–∫—É–Ω–¥—ã), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600 (10 –º–∏–Ω—É—Ç)')
    parser.add_argument('--min_speaker_segment', type=float, default=1.5, help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞ —Å–ø–∏–∫–µ—Ä–∞ (—Å–µ–∫—É–Ω–¥—ã), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.5')
    parser.add_argument('--steps', nargs='+', default=['split','denoise','vad', 'diar'],
                        help='–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏: split, denoise, vad, diar')
    parser.add_argument('--split_method', type=str, default='word_boundary', choices=['simple', 'word_boundary'],
                        help='–ú–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∫–∏: simple –∏–ª–∏ word_boundary')
    parser.add_argument('--use_gpu', action='store_true', help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –¥–ª—è VAD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--interactive', action='store_true', help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
    parser.add_argument('--parallel', action='store_true', default=True, help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    parser.add_argument('--workers', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)')
    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logger = setup_logging(log_level)
    
    logger.info("=== –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ ===")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è RTX 5080
    print("\n" + "="*60)
    print("–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø RTX 5080 + R5 5600X + 32GB RAM")
    print("="*60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPU
    gpu_available = setup_gpu_optimization()
    if gpu_available:
        print("‚úì –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è GPU –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        args.use_gpu = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º GPU
    else:
        print("‚ö† GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    optimal_workers = get_optimal_workers()
    if args.workers:
        optimal_workers = min(args.workers, optimal_workers)
    
    print(f"‚úì –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {optimal_workers}")
    print(f"‚úì –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–µ–π: {'–í–∫–ª—é—á–µ–Ω–∞' if args.parallel else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.interactive or not args.input or not args.output:
        config = show_interactive_menu()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if config is None:
            return
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
        args.input = config['input']
        args.output = config['output']
        args.chunk_duration = config['chunk_duration']
        args.min_speaker_segment = config['min_speaker_segment']
        args.split_method = config['split_method']
        args.steps = config['steps']
        args.parallel = config['parallel']
        args.use_gpu = config['use_gpu']
        optimal_workers = config['workers']
        
        # –£–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º –º–µ–Ω—é, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")

    logger.info(f"–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {vars(args)}")

    input_path = Path(args.input)
    output_dir = Path(args.output)
    chunk_duration = args.chunk_duration
    steps = args.steps
    split_method = args.split_method

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
    if not input_path.exists():
        logger.error(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_path}")
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ '{input_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    files = []
    if input_path.is_file():
        files = [input_path]
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {input_path}")
        print(f"\nüìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {input_path.name}")
        print(f"   üìÇ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {input_path.parent}")
    elif input_path.is_dir():
        files = list(input_path.glob('*.mp3')) + list(input_path.glob('*.wav'))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {input_path}")
        print(f"\nüìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {input_path.name}")
        if not files:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ (.mp3 –∏–ª–∏ .wav) –≤ –ø–∞–ø–∫–µ")
            return
        for i, file in enumerate(files, 1):
            print(f"   {i:2d}. üéµ {file.name}")
            if i >= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
                print(f"   ... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤")
                break
    else:
        logger.error(f"–§–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_path}")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
    output_dir.mkdir(parents=True, exist_ok=True)
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
    start_time = time.time()
    
    if args.parallel and len(files) > 1:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–µ–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è {len(files)} —Ñ–∞–π–ª–æ–≤...")
        print(f"‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {optimal_workers} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–µ–π")
        
        results = parallel_audio_processing_optimized(
            files, output_dir, steps, chunk_duration,
            args.min_speaker_segment, split_method, args.use_gpu, logger
        )
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        total_processed = sum(len(r) if r else 0 for r in results)
        print(f"\n‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_processed}")
        
    else:
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏
        print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        logger.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        import tempfile
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_path}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            gpu_manager = GPUMemoryManager(GPU_MEMORY_LIMIT)
            model_manager = ModelManager(gpu_manager)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —Å–ª–æ–≤
            whisper_model = None
            if 'split' in steps and split_method == 'word_boundary':
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤...")
                print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞–Ω–∏—Ü —Å–ª–æ–≤...")
                whisper_model = model_manager.get_whisper_model("base")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤...")
            from tqdm import tqdm
            
            all_processed_files = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            with tqdm(total=len(files), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤", unit="—Ñ–∞–π–ª") as pbar_files:
                for audio in files:
                    logger.info(f"\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {audio} ===")
                    print(f"\n{'='*50}")
                    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {audio.name}")
                    print(f"{'='*50}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                    result = process_audio_file_optimized(
                        audio, output_dir, steps, chunk_duration,
                        args.min_speaker_segment, split_method, args.use_gpu, logger
                    )
                    
                    if result:
                        all_processed_files.extend(result)
                    
                    pbar_files.update(1)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            model_manager.cleanup_models()
            gpu_manager.cleanup(force=True)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    end_time = time.time()
    total_time = end_time - start_time
    
    logger.info("=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")
    print(f"\nüéâ" + "="*58 + "üéâ")
    print("    ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üéâ" + "="*58 + "üéâ")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if total_time < 60:
        time_str = f"{total_time:.1f} —Å–µ–∫—É–Ω–¥"
    elif total_time < 3600:
        time_str = f"{total_time/60:.1f} –º–∏–Ω—É—Ç"
    else:
        hours = int(total_time // 3600)
        minutes = int((total_time % 3600) // 60)
        time_str = f"{hours}—á {minutes}–º"
    
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_str}")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–Ω–æ
    if output_dir.exists():
        print(f"\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å–ø–∏–∫–µ—Ä–æ–≤ –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è
        if 'diar' in steps:
            speaker_files = list(output_dir.glob('speaker_*.wav'))
            if speaker_files:
                print(f"üë• –§–∞–π–ª—ã —Å–ø–∏–∫–µ—Ä–æ–≤: {len(speaker_files)} —Ñ–∞–π–ª–æ–≤")
                for i, speaker_file in enumerate(speaker_files, 1):
                    try:
                        duration_str = get_mp3_duration(str(speaker_file))
                        print(f"   {i:2d}. üé§ {speaker_file.name} ({duration_str})")
                    except:
                        print(f"   {i:2d}. üé§ {speaker_file.name}")
                    if i >= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤
                        print(f"   ... –∏ –µ—â–µ {len(speaker_files) - 10} —Ñ–∞–π–ª–æ–≤")
                        break
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        other_files = [f for f in output_dir.glob('*.wav') if not f.name.startswith('speaker_')]
        if other_files:
            print(f"üìÑ –î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã: {len(other_files)} —Ñ–∞–π–ª–æ–≤")
            for i, file in enumerate(other_files, 1):
                print(f"   {i:2d}. üéµ {file.name}")
                if i >= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤
                    print(f"   ... –∏ –µ—â–µ {len(other_files) - 5} —Ñ–∞–π–ª–æ–≤")
                    break
    
    print(f"\nüìù –õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: audio_processing.log")
    print(f"üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if args.parallel and len(files) > 1:
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"   üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        print(f"   ‚ö° –í—Ä–µ–º—è –Ω–∞ —Ñ–∞–π–ª: {total_time/len(files):.1f} —Å–µ–∫—É–Ω–¥")
        print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏: ~{optimal_workers}x")
        print(f"   üñ•Ô∏è  GPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {'–î–∞' if gpu_available else '–ù–µ—Ç'}")
        print(f"   üß† –õ–æ–≥–∏–∫–∞: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç—å—é")
    
    print(f"\nüéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∏ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")

if __name__ == "__main__":
    main() 