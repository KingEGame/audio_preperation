#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–µ–π
"""

import os
import sys
import tempfile
from pathlib import Path
import subprocess

def create_test_audio():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∞—É–¥–∏–æ (30 —Å–µ–∫—É–Ω–¥)
    test_audio = "test_audio.wav"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é ffmpeg
    command = [
        "ffmpeg", "-f", "lavfi", "-i", "sine=frequency=1000:duration=30",
        "-ar", "16000", "-ac", "1", test_audio, "-y"
    ]
    
    try:
        subprocess.run(command, check=True, capture_output=True)
        print(f"‚úì –¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_audio}")
        return test_audio
    except subprocess.CalledProcessError as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: {e}")
        return None

def test_parallel_parts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–µ–π"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –ß–ê–°–¢–ï–ô")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
    test_audio = create_test_audio()
    if not test_audio:
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
    output_dir = "test_output"
    os.makedirs(output_dir, exist_ok=True)
    
    print(f"\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    print(f"  –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {test_audio}")
    print(f"  –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_dir}")
    print(f"  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Å–∫–∞: 10 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∞)")
    print(f"  –≠—Ç–∞–ø—ã: split, denoise, vad")
    print(f"  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–µ–π: –í–∫–ª—é—á–µ–Ω–∞")
    print(f"  GPU: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    command = [
        sys.executable, "audio_processing.py",
        "--input", test_audio,
        "--output", output_dir,
        "--chunk_duration", "10",  # 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        "--steps", "split", "denoise", "vad",  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        "--split_method", "simple",
        "--verbose"
    ]
    
    print(f"\n–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    
    try:
        print("\n–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        result = subprocess.run(command, check=True, capture_output=False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_path = Path(output_dir)
        if output_path.exists():
            files = list(output_path.glob("*.wav"))
            print(f"\n‚úì –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"  –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
            for file in files:
                print(f"    - {file.name}")
            
            # –û—á–∏—Å—Ç–∫–∞
            if test_audio and os.path.exists(test_audio):
                os.remove(test_audio)
            print(f"\n‚úì –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
            
            return True
        else:
            print(f"\n‚úó –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞: {output_dir}")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"\n‚úó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        print(f"\n‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–µ–π")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists("audio_processing.py"):
        print("‚úó –§–∞–π–ª audio_processing.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = test_parallel_parts()
    
    if success:
        print("\n" + "="*60)
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("–ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("="*60)
    else:
        print("\n" + "="*60)
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏")
        print("="*60)
    
    return success

if __name__ == "__main__":
    main() 